syntax = "proto3";

package heart7_rpc;

service Heart7 {
        rpc NewRoom (PlayerInfo) returns (NewRoomReply);
        rpc JoinRoom (JoinRoomReq) returns (stream GameMsg);
        rpc RoomStatus (RoomReq) returns (RoomInfo);
        rpc GameReady (RoomReq) returns (GameReadyReply);
        rpc GameMessage (RoomReq) returns (stream GameMsg);
        rpc GameStatus (RoomReq) returns (GameInfo);
        rpc PlayCard (PlayReq) returns (CommonReply);
        rpc ExitGame (RoomReq) returns (CommonReply);
        rpc ExitRoom (RoomReq) returns (CommonReply);
}

message PlayerInfo {
        string name = 1;
}

message NewRoomReply {
        string roomid = 1;
}

message JoinRoomReq {
        PlayerInfo player = 1;
        string roomid = 2;
}

message GameResult {
        uint32 winner = 1;
}

message RoomInfo {
        string roomid = 1;
        repeated PlayerInfo players = 2;
        message ReadyList {
                repeated uint32 l = 1;
        }
        oneof state {
                uint32 not_full = 3;
                ReadyList wait_ready = 4;
                uint32 gaming = 5;
                GameResult end_game = 6;
        }
}

message RoomReq {
        string roomid = 1;
        uint32 playerid = 2;
}

message GameReadyReply {
        uint32 left = 1;
}

enum CardSuit {
        SPADE = 0;
        HEART = 1;
        CLUB = 2;
        DIAMOND = 3;
}

message CardInfo {
        CardSuit suit = 1;
        uint32 num = 2;
}

message Chain {
        bool null = 1;
        CardInfo head = 2;
        uint32 head_thisround = 3;
        CardInfo tail = 4;
        uint32 tail_thisround = 5;
}

message Desk {
        Chain spade = 1;
        Chain heart = 2;
        Chain club = 3;
        Chain diamond = 4;
}

message HeldCards {
        repeated CardInfo my = 1;
        repeated uint32 others = 2;
}

message GameInfo {
        repeated int32 cards = 3;
        Desk desk = 5;
        HeldCards held = 6;
}

enum GameMsgType {
        ROOMINFO = 0;
        READY = 1;
        GAMEINFO = 2;
        PLAY = 3;
        CHAT = 4;
        ACTION = 5;
}

message MsgPlay {
        uint32 player = 1;
        PlayOne play = 2;
}

message GameMsg {
        oneof msg {
                RoomInfo room_info = 1;
                uint32 who_ready = 2;
                GameInfo game_info = 3;
                MsgPlay play = 4;
        }
}

message PlayOne {
        bool discard_or_hold = 1;
        CardInfo card = 2;
}

message PlayReq {
        RoomReq roomreq = 1;
        PlayOne play = 2;
}

message CommonReply {
        bool success = 1;
        string msg = 2;
}
