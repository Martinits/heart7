syntax = "proto3";

package heart7_rpc;

service Heart7 {
        rpc NewRoom (PlayerInfo) returns (NewRoomReply);
        rpc JoinRoom (JoinRoomReq) returns (stream GameMsg);
        rpc RoomStatus (RoomReq) returns (RoomInfo);
        rpc GameReady (RoomReq) returns (GameReadyReply);
        // rpc GameMessage (RoomReq) returns (stream GameMsg);
        rpc GameStatus (RoomReq) returns (GameInfo);
        rpc PlayCard (PlayReq) returns (CommonReply);
        rpc ExitGame (RoomReq) returns (CommonReply);
        rpc ExitRoom (RoomReq) returns (CommonReply);
}

message PlayerInfo {
        string name = 1;
}

message NewRoomReply {
        string roomid = 1;
}

message JoinRoomReq {
        PlayerInfo player = 1;
        string roomid = 2;
}

message RoomInfo {
        string roomid = 1;
        repeated PlayerInfo players = 2;
        message ReadyList {
                repeated uint32 l = 1;
        }
        oneof state {
                uint32 not_full = 3;
                ReadyList wait_ready = 4;
                uint32 gaming = 5;
                uint32 end_game = 6;
        }
}

message RoomReq {
        string roomid = 1;
        uint32 playerid = 2;
}

message GameReadyReply {
        uint32 left = 1;
}

enum CardSuit {
        SPADE = 0;
        HEART = 1;
        CLUB = 2;
        DIAMOND = 3;
}

message CardInfo {
        CardSuit suit = 1;
        uint32 num = 2;
}

message ChainInfo {
        CardInfo front = 2;
        bool front_is_thisround = 3;
        CardInfo back = 4;
        bool back_is_thisround = 5;
}

message DeskInfo {
        ChainInfo spade = 1;
        ChainInfo heart = 2;
        ChainInfo club = 3;
        ChainInfo diamond = 4;
}

message HeldCards {
        repeated CardInfo my = 1;
        repeated uint32 eachone = 2;
}

message GameInfo {
        repeated CardInfo cards = 1;
        DeskInfo desk = 2;
        HeldCards holds = 3;
}

message PlayOne {
        oneof play {
                CardInfo discard = 1;
                CardInfo hold = 2;
        }
}

message PlayInfo {
        uint32 player = 1;
        PlayOne playone = 2;
}

message CardResult {
        CardInfo card = 1;
        uint32 whose = 2;
}

message DeskResult {
        repeated CardResult spade = 1;
        repeated CardResult heart = 2;
        repeated CardResult club = 3;
        repeated CardResult diamond = 4;
}

message HoldList {
        repeated CardInfo holds = 1;
}

message GameResult {
        DeskResult desk = 1;
        repeated HoldList hold = 2;
}

message GameMsg {
        oneof msg {
                RoomInfo room_info = 2;
                uint32 who_ready = 3;
                uint32 start = 4;
                PlayInfo play = 5;
                GameResult endgame = 6;
        }
}

message PlayReq {
        RoomReq roomreq = 1;
        PlayOne playone = 2;
}

message CommonReply {
        bool success = 1;
        string msg = 2;
}
